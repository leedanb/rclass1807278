#######################################################
## 문제 6 dep 의 컬럼명을 한글로 전환하시오
## 부서아이디 = DEPARTMENT_ID
## 부서명 = DEPARTMENT_NAME
## 매니저아이디 = MANAGER_ID
## 위치아이디 = LOCATION_ID
#######################################################
dep<- dep %>%
dplyr::rename(부서아이디=DEPARTMENT_ID, 부서명=DEPARTMENT_NAME,
매니저아이디=MANAGER_ID, 위치아이디=LOCATION_ID)
head(dep)
emp<-emp %>%
dplyr::rename(직원아이디=EMPLOYEE_ED,
이메일 = EMAIL,
전화번호 = PHONE_NUMBER,
채용일 = HIRE_DATE,
업무아이디 = JOB_ID,
연봉 = SALARY,
커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
emp<-emp %>%
dplyr::rename(직원아이디=EMPLOYEE_ID,
이메일 = EMAIL,
전화번호 = PHONE_NUMBER,
채용일 = HIRE_DATE,
업무아이디 = JOB_ID,
연봉 = SALARY,
커미션비율 = COMMISSION_PCT,
매니저아이디 = MANAGER_ID,
부서아이디 = DEPARTMENT_ID)
head(emp)
emp<-emp %>%
dplyr::mutate(이름=paste(FIRST_NAME LAST_NAME))
emp<-emp %>%
dplyr::mutate(이름=(paste(FIRST_NAME LAST_NAME)))
emp<-emp %>%
dplyr::mutate(이름=paste(FIRST_NAME, LAST_NAME))
head(emp)
job<-job %>%
dplyr::rename(업무아이디 = JOB_ID,
업무명 = JOB_TITLE,
최소연봉 = MIN_SALARY,
최대연봉 = MAX_SALARY)
head(job)
jobh<-jobh %>%
dplyr::rename(직원아이디 = EMPLOYEE_ID,
업무시작일 = START_DATE,
업무종료일 = END_DATE,
업무아이디 = JOB_ID,
부서아이디 = DEPARTMENT_ID)
head(jobh)
loc <- loc %>%
dplyr::rename(위치아이디 = LOCATION_ID,
거리주소 = STREET_ADDRESS,
우편번호 = POSTAL_CODE,
도시 = CITY,
주 = STATE_PROVINCE,
국가아이디 = COUNTRY_ID)
tail(loc)
#######################################################
## 문제 13 reg 의 컬럼명을 한글로 전환하시오
## 지역아이디 = REGION_ID
## 지역명 = REGION_NAME
#######################################################
reg<-reg %>%
dplyr::rename(지역아이디 = REGION_ID,
지역명 = REGION_NAME)
tail(reg)
emp<- emp %>%
mutate(월급=연봉%/%12)
head(emp)
## 직원아이디 = EMPLOYEE_ID
## 이메일 = EMAIL
## 전화번호 = PHONE_NUMBER
## 채용일 = HIRE_DATE
## 업무아이디 = JOB_ID
## 연봉 = SALARY
## 커미션비율 = COMMISSION_PCT
## 매니저아이디 = MANAGER_ID
## 부서아이디 = DEPARTMENT_ID
#######################################################
str(emp)
View(emp)
head(emp)
if(is.data.frame(emp)){
emp<-subset(emp, select= -c(FIRST_NAME,LAST_NAME))
}
head(emp)
emp %>%
dplyr::filter(연봉>=10000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(연봉)
emp %>%
dplyr::filter(연봉>=10000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(desc(연봉))
emp %>%
dplyr::filter(연봉<3000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(직원아이디)
보너스지급내역서<- emp%>%
dplyr::filter(연봉<3000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(직원아이디) %>%
mutate(sprintf("%0.0f 만원", 연봉*0.01))
head(보너스지급내역서)
보너스지급내역서<- emp%>%
dplyr::filter(연봉<3000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(직원아이디) %>%
mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01))
head(보너스지급내역서)
보너스지급내역서<- emp%>%
dplyr::filter(연봉<3000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(직원아이디) %>%
mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01))
View(보너스지급내역서)
head(보너스지급내역서)
rm(보너스지급내역서)
source('C:/R/project180728/OracleHR.R', encoding = 'UTF-8', echo=TRUE)
rm(보너스지급내역서)
head(emp)
View(emp)
보너스지급내역서<- emp%>%
dplyr::filter(연봉<3000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(직원아이디) %>%
mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01))
보너스지급내역서
write.csv(보너스지급내역서)
getwd()
rm(보너스지급내역서)
head(보너스지급내역서)
emp %>%
dplyr::filter(연봉 == 24000) %>%
dplyr::select(이름)
apply(emp %>% select(연봉),2,max)
emp %>%
dplyr::filter(연봉 == apply(emp %>% select(연봉),2,max)) %>%
dplyr::select(이름)
emp %>%
dplyr::filter(apply(emp %>% slect(연봉),2,max)) %>%
dplyr::select(이름)
emp %>%
dplyr::filter(apply(emp %>% select(연봉),2,max)) %>%
dplyr::select(이름)
apply(emp %>% slect(연봉),2,max)
emp %>%
dplyr::filter(연봉 == apply(emp %>% select(연봉),2,max)) %>%
dplyr::select(이름)
emp %>% filter(연봉==apply(emp %>% select(연봉),2,max)) %>%
dplyr::select(이름)
emp %>%
dplyr::left_join(dep,by="부서아이디") %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
#######################################################
## 문제 17. 연봉이 10000이 넘는 직원의 부서명, 이름,
## 연봉을 출력하시오.  (연봉, 이름, 부서아이디는 emp / 부서아이디, 부서명은 dep에 있음)
## join함수 사용해야함
#######################################################
emp %>%
dplyr::left_join(dep,by="부서아이디") %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep,by="부서아이디") %>%
dplyr::filter(연봉>=10000) %>%
dplyr::select(부서명, 이름, 연봉) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep, by="부서아이디") %>%
dplyr::left_join(job, by="업무아이디") %>%
dplyr::filter(연봉>=12000) %>%
dplyr::select(부서명, 이름, 연봉, 업무명) %>%
dplyr::arrange(desc(연봉))
emp %>%
dplyr::left_join(dep, by="부서아이디") %>%
dplyr::group_by(부서명, 부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉)) %>%
dplyr::arrange(desc(연봉평균))
source('C:/R/project180728/OracleHR.R', encoding = 'UTF-8', echo=TRUE)
연봉평균<-emp %>%
dplyr::left_join(dep, by="부서아이디") %>%
dplyr::group_by(부서명, 부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉)) %>%
dplyr::arrange(desc(연봉평균))
View(연봉평균)
연봉평균<-emp %>%
dplyr::left_join(dep, by="부서아이디") %>%
dplyr::group_by(부서명, 부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉, na.rm=T)) %>%
dplyr::arrange(desc(연봉평균))
View(연봉평균)
dep %>%
dplyr::distinct(부서명) %>%
count
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 사원수, 평균연봉, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T), 사원수=dplyr::distinct(부서명) %>%
count)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 사원수, 평균연봉, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T), 사원수=distinct(부서명) %>%
count)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 사원수, 평균연봉, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T), 사원수=distinct(부서명), count)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 사원수, 평균연봉, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T), 사원수=length(직원아이디))
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 사원수, 평균연봉, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T)) %>%
dplyr::summarise(사원수=length(직원아이디))
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T)) %>%
dplyr::summarise(사원수=length(직원아이디))
연봉평균<-emp %>%
dplyr::left_join(dep, by="부서아이디") %>%
dplyr::group_by(부서명, 부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉, na.rm=T)) %>%
dplyr::arrange(desc(연봉평균))
View(연봉평균)
연봉평균<-emp %>%
dplyr::left_join(dep, by="부서아이디") %>%
dplyr::group_by(부서명, 부서아이디) %>%
dplyr::summarise(연봉평균 = mean(연봉, na.rm=T)) %>%
dplyr::arrange(desc(연봉평균))
View(연봉평균)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.0f 만원",mean(연봉, na.rm=T))) %>%
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.0f 만원",mean(연봉, na.rm=T)))
View(emp)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.0f 만원",mean(연봉, na.rm=T)))
View(연봉평균)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.00f 만원",mean(연봉, na.rm=T)))
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=mean(연봉, na.rm=T))
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.00f 만원",mean(연봉, na.rm=T)))
View(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.000f 만원",mean(연봉, na.rm=T)))
View(a)
View(연봉평균)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.02f 만원",mean(연봉, na.rm=T)))
View(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.02f 만원",mean(연봉, na.rm=T)),사원수=length(직원아이디))
View(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.02f",mean(연봉, na.rm=T)),사원수=length(직원아이디))
View(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.02f만원",mean(연봉, na.rm=T)),사원수=length(직원아이디))
View(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(평균연봉=sprintf("%0.2f만원",mean(연봉, na.rm=T)),사원수=length(직원아이디))
View(a)
if(is.data.frame(a)){
a<-subset(a, select= -c(부서아이디, 위치아이디))
}
View(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시, 부서아이디, 위치아이디) %>%
dplyr::summarise(사원수=length(직원아이디), 평균연봉=sprintf("%0.2f만원",mean(연봉, na.rm=T)))
View(a)
if(is.data.frame(a)){
a<-subset(a, select= -c(부서아이디, 위치아이디))
}
View(a)
head(a)
a<-emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::left_join(loc,"위치아이디") %>%
dplyr::group_by(부서명, 도시) %>%
dplyr::summarise(사원수=length(직원아이디), 평균연봉=sprintf("%0.2f만원",mean(연봉, na.rm=T)))
View(a)
emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::group_by(부서아이디, 부서명) %>%
dplyr::summarise(최대연봉=max(연봉))
a<- emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::group_by(부서아이디, 부서명) %>%
dplyr::summarise(최대연봉=max(연봉))
View(a)
a<- emp %>%
dplyr::left_join(dep,"부서아이디") %>%
dplyr::group_by(부서아이디, 부서명) %>%
dplyr::summarise(최대연봉=max(연봉)) %>%
arrange(부서명)
View(a)
install.packages("stringr")
install.packages("stringr")
library(stringr)
#######################################################
#### 문제 23. 부서아이디를 발급받지 않으면
#### 신입입니다.
#### 신입의 이름과 연봉, 부서아이디 없음을 출력하시오.
##  test <- c('apple','banana','cherry','Apple','Pineapple',NA)
## ifelse(stringr::str_detect(test,'A'),'Good','Bad')
######################################################
test<-c('apple','banna','cherry','Apple','Pineapple')
ifelse(stringr::str_detect(test,'A'), 'GOOD','Bad')
emp %>%
select(부서아이디)
emp %>%
dplyr::select(부서아이디)
emp %>%
dplyr::select(is.na(부서아이디))
is.na(emp %>%
dplyr::select(부서아이디))
emp %>%
dplyr::filter(is.na(emp %>%
dplyr::select(부서아이디))) %>%
dplyr::select(이름, 연봉, 부서아이디)
emp %>%
dplyr::filter(ifelse(stringr::str_detect(emp$이름, "S" & emp$이름, "T"))) %>%
select(이름) %>%
arrange(이름)
emp %>%
dplyr::filter(ifelse(stringr::str_detect(emp$이름, "S" )),
ifelse(stringr::str_detect( emp$이름, "T"))) %>%
select(이름) %>%
arrange(이름)
emp %>%
dplyr::filter(stringr::str_detect(emp$이름, "S" ),
stringr::str_detect( emp$이름, "T")) %>%
select(이름) %>%
arrange(이름)
emp %>%
dplyr::filter(stringr::str_detect(emp$이름, "S" ),
stringr::str_detect( emp$이름, "T")) %>%
dplyr::select(이름) %>%
arrange(이름)
emp %>%
dplyr::filter(stringr::str_detect(emp$이름, "S" ),
stringr::str_detect( emp$이름, "T")) %>%
dplyr::select(이름) %>%
dplyr::arrange(이름)
emp %>%
dplyr::filter(stringr::str_detect(emp$이름, "S"),
stringr::str_detect(emp$이름, "T")) %>%
dplyr::select(이름)
보너스지급내역서<- emp%>%
dplyr::filter(연봉<3000) %>%
select(이름, 직원아이디, 연봉) %>%
arrange(직원아이디) %>%
mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01))
보너스지급내역서<- emp%>%
dplyr::filter(연봉<3000) %>%
dplyr::select(이름, 직원아이디, 연봉) %>%
dplyr::arrange(직원아이디) %>%
dplyr::mutate(보너스=sprintf("%0.0f 만원", 연봉*0.01))
write.csv(보너스지급내역서, '보너스지급내역서.csv')
rm(보너스지급내역서)
library(rJava)
library(DBI)
library(RJDBC)
library(XML)
library(memoise)
library(KoNLP)
library(wordcloud)
library(dplyr)
library(ggplot2)
library(ggmap)
library(rvest)
library(RColorBrewer)
library(data.table)
library(reshape)
library(stringr)
txt<-readLines("seoultext.txt")
KoNLP::useSejongDic()
txt<-readLines("seoultext.txt")
txt
txt
txt<-readLines("seoultext.txt")
place <- sapply(txt,KoNLP::extractNoun(), USE.NAMES = F)
place <- sapply(txt,KoNLP::extractNoun, USE.NAMES = F)
place <- sapply(txt,extractNoun, USE.NAMES = F)
place
temp<-unlist(place)
temp
place<-Filter(function(x)(nchar(x)>=3),txt)
temp<-unlist(place)
temp
place<-gsub("이상","",place)
place
write(unlist(place))
test<-brewer.pal(9,"set1")
wordcloud(names(table(place)),
freq = table(place),
scale = c(5,1),
rot.per=0.25,
min.freq=1,
random.order=F,
random.color=T,
colors=palete)
temp<-unlist(place)
place<-Filter(function(x)(nchar(x)>=3),txt)
place<-gsub("이상","",place)
write(unlist(place))
test<-brewer.pal(9,"set1")
wordcloud(names(table(place)),
freq = table(place),
scale = c(5,1),
rot.per=0.25,
min.freq=1,
random.order=F,
random.color=T,
colors=palete)
wordcloud(names(table(place)),
freq = table(place),
scale = c(5,1),
rot.per=0.25,
min.freq=1,
random.order=F,
random.color=T,
colors=palette)
test<-brewer.pal(9,place)
wordcloud(names(table(place)),
freq = table(place),
scale = c(5,1),
rot.per=0.25,
min.freq=1,
random.order=F,
random.color=T,
colors=test)
temp<-unlist(place)
place<-Filter(function(x)(nchar(x)>=3),txt)
place<-gsub("이상","",place)
test<-brewer.pal(9,place)
wordcloud(names(table(place)),
freq = table(place),
scale = c(5,1),
rot.per=0.25,
min.freq=1,
random.order=F,
random.color=T,
colors=test)
txt<- str_replace_all(tst,"\\w","")
txt<- str_replace_all(txt,"\\w","")
nouns<-KoLNP:extractNoun(txt)
nouns<-KoNLP:extractNoun(txt)
KoNLP::useSejongDic()
txt<-readLines("seoultext.txt")
txt<- str_replace_all(txt,"\\w","")
nouns<-KoNLP:extractNoun(txt)
nouns<-KoNLP::extractNoun(txt)
wordcount<-table(unlist(nouns))
df<-as.data.frame(wordcount, stringsAsFactor=F)
df<-rename(df,word=var1,freq=Freq)
